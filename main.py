# main.py
import os
import time
import threading
import logging
import datetime
import math
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Depends, Request
from db import (
    find_free_session,
    mark_session_in_use,
    release_session,
    set_floodwait,
    get_status,
    free_stuck_sessions,
    sync_sessions,
    get_connection,
    release_connection
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –ª–æ–≥–∏ –±—É–¥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ —Ñ–∞–π–ª session_manager.log
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    filename="session_manager.log",
    filemode="a"
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ lifespan
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏:
    threading.Thread(target=background_free_stuck, daemon=True).start()
    threading.Thread(target=background_sync_files, daemon=True).start()
    logging.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
    yield
    # –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è

app = FastAPI(lifespan=lifespan)

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö API-–∫–ª—é—á–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
ALLOWED_API_KEYS = {"734f1f98137cc7dd341eee8148d73f1a0e6df6edd8b7dc627b66ea2312dc3be6",
                    "8093a9bbf4e0d87cfdac4e629c598a5021fc1c4d6d4c62e879150ccf14132dcf",
                    "f9f9bafd55922e1cacfffa46c6cf46f1414d332ae0e0c3aa8be6b8b797999041",
                    "418e0534f64f120a2739b08a108d8288b8b4e1e23bab0a7bc618fd2899a5d671",
                    "960954b245c7bf34ceff5e5073118aa59a225af139be281bbb12b5174d4f67cf"
                    }  


def check_api_key(request: Request):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ 'X-API-Key'.
    –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º ‚Äì –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPException.
    """
    api_key = request.headers.get("X-API-Key")
    print(f"üîç –ü–æ–ª—É—á–µ–Ω API-–∫–ª—é—á: {api_key}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á
    if not api_key:
        raise HTTPException(status_code=401, detail="API key required")
    if api_key not in ALLOWED_API_KEYS:
        raise HTTPException(status_code=403, detail="Invalid API key")
    return api_key

@app.get("/status")
def status(api_key: str = Depends(check_api_key)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç /status –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
      - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π.
      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π.
      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö —Å–µ—Å—Å–∏–π.
      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Flood Wait.
      - –í—Ä–µ–º—è, –∫–æ–≥–¥–∞ –±–ª–∏–∂–∞–π—à–∞—è —Å–µ—Å—Å–∏—è –≤—ã–π–¥–µ—Ç –∏–∑ Flood Wait.
    """
    stats = get_status()
    if stats["next_available"]:
        stats["next_available"] = stats["next_available"].strftime("%Y-%m-%d %H:%M:%S")
    return stats

@app.get("/session")
def acquire_session(api_key: str = Depends(check_api_key)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–≤–æ–±–æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ ‚Äì –ø–æ–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ –∑–∞–Ω—è—Ç–æ–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Flood Wait:
      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ Flood Wait.
      - –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–∞–π—à–∞—è —Å–µ—Å—Å–∏—è.
    """
    session = find_free_session()
    if session is None:
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö –≤ Flood Wait
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM sessions WHERE in_floodwait = TRUE AND floodwait_until > NOW();")
        waiting = cur.fetchone()[0]
        cur.execute("SELECT MIN(floodwait_until) FROM sessions WHERE in_floodwait = TRUE AND floodwait_until > NOW();")
        next_time = cur.fetchone()[0]
        cur.close()
        release_connection(conn)
        if next_time:
            seconds_to_wait = math.ceil((next_time - datetime.datetime.now()).total_seconds())
        else:
            seconds_to_wait = None
        detail = {
            "error": "no_free_session",
            "in_floodwait": int(waiting),
            "next_release_in": seconds_to_wait
        }
        raise HTTPException(status_code=503, detail=detail)
    # –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–º–µ—á–∞–µ–º –µ—ë –∫–∞–∫ in_use –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    mark_session_in_use(session["id"])
    return {"session_id": session["id"], "session_name": session["name"]}

@app.post("/release")
def api_release_session(session_id: int, api_key: str = Depends(check_api_key)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–µ—Å—Å–∏–∏ –≤ –ø—É–ª.
    –ö–ª–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π.
    """
    release_session(session_id)
    return {"status": "released", "session_id": session_id}

@app.post("/invalidate")
def api_invalidate_session(session_id: int, api_key: str = Depends(check_api_key)):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.
    –ü—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º floodwait_until –Ω–∞ –¥–∞–ª—ë–∫—É—é –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2099-01-01),
    —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –¥–æ —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
    """
    far_future = datetime.datetime(2099, 1, 1)
    wait_seconds = (far_future - datetime.datetime.now()).total_seconds()
    set_floodwait(session_id, wait_seconds=wait_seconds)
    return {"status": "invalidated", "session_id": session_id}

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö —Å–µ—Å—Å–∏–π (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª–µ–µ 3 —á–∞—Å–æ–≤)
def background_free_stuck():
    while True:
        freed = free_stuck_sessions(max_duration_hours=3)
        if freed:
            logging.info(f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –∑–∞–≤–∏—Å—à–∏—Ö —Å–µ—Å—Å–∏–π: {freed}")
        time.sleep(1800)  # –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–π —Å –∑–∞–ø–∏—Å—è–º–∏ –≤ –ë–î
def background_sync_files():
    while True:
        sync_sessions()
        time.sleep(3600)  # –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 1 —á–∞—Å

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ lifespan (—Å–º. –≤—ã—à–µ)


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Uvicorn –∏–ª–∏ Gunicorn+UvicornWorker.
# –ü—Ä–∏–º–µ—Ä –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:
# uvicorn main:app --host 0.0.0.0 --port 8000 --reload